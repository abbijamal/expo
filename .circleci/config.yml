version: 2

anchors:
  - &node_job
    working_directory: ~/expo
    docker:
      # https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/node/images
      - image: circleci/node:8

  - &default_android
    working_directory: ~/expo
    docker:
      # https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/android/images
      - image: circleci/android:api-25-node8-alpha

  - &default_env_vars
    YARN_CACHE_FOLDER: ~/.cache/yarn

  - &set_up_environment
    run:
      name: Set up the environment
      command: |
        # Clone the submodules
        git submodule update --init

        # Trust all of the .envrc files for direnv
        find . -name '.envrc' -exec direnv allow {} \;

        # Update Yarn
        curl -o- -L https://yarnpkg.com/install.sh | bash
        echo 'export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> "$BASH_ENV"

  - &install_workspace_dependencies
    run:
      name: Install Yarn workspace dependencies (node_modules)
      command: |
        # Run `yarn install` from the workspace root to install all of the workspaces' dependencies
        # including each other if there are co-dependencies
        yarn install

  - &install_ndk
    run:
      command: |
        ndk_version=android-ndk-r10e
        android_ndk_home=/opt/android/${ndk_version}
        curl --silent --show-error --location --fail --retry 3 --output /tmp/${ndk_version}.zip https://dl.google.com/android/repository/${ndk_version}-linux-x86_64.zip && \
        sudo unzip -q /tmp/${ndk_version}.zip -d /opt/android && \
        rm /tmp/${ndk_version}.zip && \
        sudo chown -R circleci:circleci ${android_ndk_home}
        echo "export ANDROID_NDK_HOME=${android_ndk_home}" >> "$BASH_ENV"

  - &restore_yarn_cache
    restore_cache:
      key: yarn-v1-{{ checksum "yarn.lock" }}

  - &save_yarn_cache
    save_cache:
      key: yarn-v1-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn  # set by YARN_CACHE_FOLDER

  - &restore_gradle_cache
    restore_cache:
      key: jars-v0-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}

  - &save_gradle_cache
    save_cache:
      key: jars-v0-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
      paths:
      - /.gradle

  - &lint
    name: Lint
    command: yarn lint --max-warnings 0

  - &jest
    name: Unit tests (Jest)
    command: yarn jest --maxWorkers 2

workflows:
  version: 2

  # JavaScript packages that make up the SDK
  sdk:
    jobs:
      - expo_sdk
      - babel_preset

  # Android and iOS clients
  client:
    jobs:
      - home
      - client_android

jobs:
  expo_sdk:
    <<: *node_job
    environment:
      <<: *default_env_vars
    steps:
      - checkout
      - *set_up_environment
      - *restore_yarn_cache
      - *install_workspace_dependencies
      - *save_yarn_cache
      # Add back linting once we get ESLint or TSLint set up
      - run:
          <<: *jest
          working_directory: ~/expo/packages/expo

  babel_preset:
    <<: *node_job
    environment:
      <<: *default_env_vars
    steps:
      - checkout
      - *set_up_environment
      - *restore_yarn_cache
      - *install_workspace_dependencies
      - *save_yarn_cache
      - run:
          <<: *lint
          working_directory: ~/expo/packages/babel-preset-expo
      - run:
          <<: *jest
          working_directory: ~/expo/packages/babel-preset-expo

  home:
    <<: *node_job
    environment:
      <<: *default_env_vars
    steps:
      - checkout
      - *set_up_environment
      - *restore_yarn_cache
      - *install_workspace_dependencies
      - *save_yarn_cache
      - run:
          <<: *jest
          working_directory: ~/expo/home

  client_android:
    <<: *default_android
    environment:
      <<: *default_env_vars
    working_directory: ~/expo/android
    steps:
      - checkout
      - *set_up_environment
      - run:
          working_directory: ~/project/tools-public
          command: yarn install
      - run:
          working_directory: ~/project/tools-public
          command: generate-dynamic-macros-android.sh
      - *install_ndk
      - *restore_gradle_cache
      - run: ./gradlew :app:preBuild
      - *save_gradle_cache
      - run: ./gradlew :app:assembleProdMinSdkProdKernelRelease
      - run: zipalign -v -p 4 ./app/build/outputs/apk/prodMinSdkProdKernel/release/app-prodMinSdk-prodKernel-release-unsigned.apk app-prod-release-unsigned-aligned.apk
